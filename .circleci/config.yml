version: 2

jobs:
    build:
        environment:
            TZ: "/usr/share/zoneinfo/America/Detroit"
        working_directory: ~/app
        docker:
            - image: circleci/openjdk:8u181-jdk-stretch-node-browsers
        steps:

            ##
            # SETUP
            ##
            - add_ssh_keys
            - checkout
            - run:
                name: Flag local/PR builds
                command: |
                  bash .devops/flagBuilds.sh
            - run:
                name: Duplicate build check
                command: |
                  bash .devops/duplicateBuildCheck.sh
            - run:
                name: Install jq
                command: |
                  sudo curl -sSL -o /usr/local/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
                  sudo chmod +x /usr/local/bin/jq
            - run:
                name: Calculate codebase version
                command: |
                  bash .devops/calculate-app-version.sh
            - run:
                name: Prep for Whitesource
                command: |
                  if [[ ! -f ~/.localCircleBuild ]]; then
                    bash .devops/prep-for-whitesource.sh
                  fi

            ##
            # RESTORE CACHES
            ##
            - restore_cache:
                key: v1-dependency-cache-{{ checksum "build.gradle" }}
            - restore_cache:
                key: v1-wrapper-cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}

            ##
            # GRADLE
            ##
            - run:
                name: Install Gradle dependencies
                command: |
                  TERM=dumb ./gradlew dependencies
            - run:
                name: Run Gradle Tests
                command: |
                  TERM=dumb ./gradlew clean test --info
            - run:
                name: Run Whitesource
                command: |
                  if [[ ! -f ~/.localCircleBuild && ! -f ~/.prCircleBuild ]]; then
                    TERM=dumb ./gradlew updatewhitesource
                  fi

            ##
            # SAVE CACHES
            ##
            - save_cache:
                key: v1-dependency-cache-{{ checksum "build.gradle" }}
                paths:
                    - /home/circleci/.gradle/caches
            - save_cache:
                key: v1-wrapper-cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
                paths:
                    - /home/circleci/.gradle/wrapper

            ##
            # DEPLOYMENT
            ##
            - run:
                name: Deploy Beta (master)
                command: |
                  set -ou pipefail
                  if [[ ! -f ~/.localCircleBuild ]]; then
                    if [ "${CIRCLE_BRANCH}" == "master" ]; then
                      bash .devops/duplicateBuildCheck.sh
                      bash .devops/deploy.sh beta
                      bash .devops/duplicateBuildCheck.sh done
                    fi
                  fi
            - run:
                name: Deploy RC (rc)
                command: |
                  set -ou pipefail
                  if [[ ! -f ~/.localCircleBuild ]]; then
                    if [ "${CIRCLE_BRANCH}" == "rc" ]; then
                      bash .devops/duplicateBuildCheck.sh
                      bash .devops/deploy.sh rc
                      bash .devops/duplicateBuildCheck.sh
                      bash .devops/post-release.sh
                      # Need to checkout rc again so we can run more scripts.
                      git checkout rc
                      bash .devops/updateProdReleasePr.sh
                      bash .devops/duplicateBuildCheck.sh done
                    fi
                  fi
            - run:
                name: Deploy Production (release)
                command: |
                  set -ou pipefail
                  if [[ ! -f ~/.localCircleBuild ]]; then
                    if [ "${CIRCLE_BRANCH}" == "release" ]; then
                      bash .devops/duplicateBuildCheck.sh
                      bash .devops/deploy.sh release
                      bash .devops/duplicateBuildCheck.sh
                      bash .devops/post-release.sh
                      # Need to checkout release again so we can run more scripts.
                      git checkout release
                      bash .devops/duplicateBuildCheck.sh done
                    fi
                  fi
