// Plugins
plugins {
    id 'idea'
    id 'java'
    id 'de.fuerstenau.buildconfig' version '1.1.8'
    id 'maven'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
}

// Project info
group "${theGroup}"
version "${theVersion}"
description = 'Official Auklet SDK for Java and other JVM languages.'

// Java version
sourceCompatibility = 7
targetCompatibility = 7

// Dependencies
repositories {
    jcenter()
    google()
}
dependencies {
    compile "com.squareup.okhttp3:okhttp:3.12.0"
    compile "com.squareup.okhttp3:logging-interceptor:3.12.0"
    compile("org.sharegov:mjson:1.4.1") {
        // Junit is an accidental non-test-scoped dependency, so we need to exclude it.
        exclude group: "junit"
    }
    compile "org.msgpack:msgpack-core:0.8.16"
    compile "org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0"
    compile "org.slf4j:slf4j-api:1.7.25"
    compile "com.github.stephenc.jcip:jcip-annotations:1.0-1"
    // End-users never need to re-include SpotBugs Annotations in their list of dependencies,
    // and those that do so may run into legal issues if they distribute it alongside an
    // Oracle JRE/JDK. See https://stackoverflow.com/a/36198568 for details.
    // Also, SpotBugs Annotations requires Java 8.
    compileOnly "com.github.spotbugs:spotbugs-annotations:3.1.10"
    // purejavacomm requires Java 8. If you are using purejavacomm, you should also include
    // sysout-over-slf4j so that purejavacomm's logging uses SLF4J.
    compileOnly "com.github.purejavacomm:purejavacomm:1.0.1.RELEASE"
    compileOnly "uk.org.lidalia:sysout-over-slf4j:1.0.2"
    compileOnly("com.google.android:android:4.1.1.4") {
        transitive = false
    }
    testCompile "org.slf4j:slf4j-simple:1.7.25"
}

// Compilation configuration
allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            // When compiling with JDK 7, warnings are generated because SpotBugs Annotations
            // and purejavacomm are compiled for Java 8. These warnings seem to be silenceable
            // only with "-Xlint:none", but Oracle docs are not clear on what other warnings
            // are silenced by doing this, so don't try to silence those warnings.

            // On JDK 8, when env var JDK7_HOME is set (should only be set when Gradle itself is not
            // run with JDK 7, e.g. in CircleCI), use it as the bootstrap classpath to eliminate
            // compilation warnings/enforce Java 7 syntax.
            def jdk7Home = System.getenv("JDK7_HOME")
            if (JavaVersion.current().isJava8() && jdk7Home) {
                options.bootstrapClasspath = files(
                        "${jdk7Home}/jre/lib/resources.jar",
                        "${jdk7Home}/jre/lib/rt.jar",
                        "${jdk7Home}/jre/lib/sunrsasign.jar",
                        "${jdk7Home}/jre/lib/jsse.jar",
                        "${jdk7Home}/jre/lib/jce.jar",
                        "${jdk7Home}/jre/lib/charsets.jar",
                        "${jdk7Home}/jre/lib/rhino.jar",
                        "${jdk7Home}/jre/lib/jfr.jar",
                        "${jdk7Home}/jre/classes"
                )
            }
        }
    }
}

// Module export (compile-time Java 9+)
if (JavaVersion.current().isJava9Compatible()) {
    sourceSets {
        moduleInfo {
            java {
                srcDir 'src/module-info/java'
            }
        }
    }
    compileModuleInfoJava {
        sourceCompatibility = 9
        targetCompatibility = 9
        inputs.property("moduleName", 'io.auklet')
        doFirst {
            classpath += sourceSets.main.compileClasspath
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'ALL-SYSTEM',
                    '-d', sourceSets.main.output.classesDirs.asPath
            ]
        }
    }
} else {
    sourceSets {
        moduleInfo {}
    }
}

// Test configuration
test {
    testLogging.showStandardStreams = true
}

// Javadoc configuration
javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
}

// Packaging configurations
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
jar {
    from sourceSets.main.output
    from sourceSets.moduleInfo.output
    manifest {
        attributes(
            'Built-By': 'CircleCI',
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version'),
            'Implementation-Version': version,
            'Implementation-Title': project.name,
            'Sealed': 'true'
        )
    }
}

// Deployment configurations
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    scm {
       url "https://github.com/aukletio/Auklet-Agent-Java"
    }
}
publishing {
    publications {
        AukletJavaAgent(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId "${theGroup}"
            artifactId "${theName}"
            version "${theVersion}"
            pom.withXml {
                def root = asNode()
                root.appendNode('description', "${description}")
                root.appendNode('name', 'Auklet Java Agent')
                root.appendNode('url', 'https://auklet.io')
                root.children().last() + pomConfig
            }
        }
    }
}
bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['AukletJavaAgent']
    publish = true
    pkg {
        userOrg = 'aukletio'
        repo = 'agent-java'
        name = "${theName}"
        desc = "${description}"
        websiteUrl = 'https://github.com/aukletio/Auklet-Agent-Java'
        issueTrackerUrl = 'https://github.com/aukletio/Auklet-Agent-Java/issues'
        vcsUrl = 'https://github.com/aukletio/Auklet-Agent-Java.git'
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true
    }
}
